<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-30T09:55:12.196Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>国庆</title>
    <link href="http://yoursite.com/2019/07/30/travel/"/>
    <id>http://yoursite.com/2019/07/30/travel/</id>
    <published>2019-07-30T09:45:59.000Z</published>
    <updated>2019-07-30T09:55:12.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="广州"><a href="#广州" class="headerlink" title="广州"></a>广州</h2><p><code>石室圣心大教堂</code> 拍照</p><p><code>沙面</code> </p><p><code>上下九步行街</code> 晚上去吃</p><p><code>广州塔</code>，<code>珠江</code> 下午-晚上</p><p><code>大学城</code></p><h4 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h4><p><code>八合里海记牛肉</code></p><h2 id="顺德"><a href="#顺德" class="headerlink" title="顺德"></a>顺德</h2><p><code>仁信民信</code></p><p><img src="https://i.loli.net/2019/07/30/5d4012aabd86351257.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;广州&quot;&gt;&lt;a href=&quot;#广州&quot; class=&quot;headerlink&quot; title=&quot;广州&quot;&gt;&lt;/a&gt;广州&lt;/h2&gt;&lt;p&gt;&lt;code&gt;石室圣心大教堂&lt;/code&gt; 拍照&lt;/p&gt;
&lt;p&gt;&lt;code&gt;沙面&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;上下九步行街&lt;/c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gulp简单使用</title>
    <link href="http://yoursite.com/2019/07/23/gulp/"/>
    <id>http://yoursite.com/2019/07/23/gulp/</id>
    <published>2019-07-23T08:16:06.000Z</published>
    <updated>2019-07-23T07:20:37.739Z</updated>
    
    <content type="html"><![CDATA[<p>Gulp是前端自动化开发工具，提高开发的效率。例如：css、js的合并与压缩、html压缩、压缩less、压缩图片等。<br>本文主要介绍<a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp</a>比较简单的使用</p><h2 id="安装Gulp"><a href="#安装Gulp" class="headerlink" title="安装Gulp"></a>安装Gulp</h2><ol><li>全局安装 gulp</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ol start="2"><li>创建文件夹gulp，在文件夹下安装依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure><ol start="3"><li>创建<code>gulpfile.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br></pre></td></tr></table></figure><h2 id="处理html、css、js"><a href="#处理html、css、js" class="headerlink" title="处理html、css、js"></a>处理html、css、js</h2><ol><li>创建html文件夹，并在文件夹下创建几个需要处理的html、css和js，如下：</li></ol><p><img src="https://i.loli.net/2019/07/22/5d3587ea684b457165.jpg"></p><p>并分别在login.html和home.html中引入index.js和css.css，js和css文件中可以随便加点东西</p><p><img src="https://i.loli.net/2019/07/22/5d3588c8912c794998.jpg"></p><p><img src="https://i.loli.net/2019/07/22/5d3588c909abf98961.jpg"></p><ol start="2"><li>gulpfile.js编写</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'revHtml'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./html/pages/**/*.html'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>task：gulp.task作用是定义一个任务，revHtml是当前任务的名字。gulp.src输出符合所提供的匹配模式的文件，你可以制定匹配某个文件，其中<code>*<em>/</em>.html</code>代表匹配当前<code>pages</code>文件夹下所有的html文件,关于匹配模式感兴趣的可以自行Google或百度。</p><p>pipe：pipe是node的stream部分的内容,pipe方法传入方法的是一个function，这个function作用是接受上一个流（stream）的结果，并返回一个处理后流的结果(返回值应该是一个stream对象)。</p><p>gulp.dest：能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。</p><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp revHtml</span><br></pre></td></tr></table></figure></p><p>可以看到会创建一个<code>dist</code>文件夹，并把处理之后的html文件在<code>dist</code>下自动生成，然后同理处理js和css文件，加入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'revCss'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./html/css/**/*.css'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'revJs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./html/js/**/*.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在需要这三种处理按照一定的顺序来执行，需要用到</p><blockquote><p>gulp.series 用于串行（顺序）执行<br>gulp.parallel 用于并行执行</p></blockquote><p>这是gulp4的写法，需要用gulp3的可以更换。</p><p>加入代码，<code>default</code>表示默认执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(gulp.parallel(<span class="string">'revCss'</span>,<span class="string">'revJs'</span>),<span class="string">'revHtml'</span>));</span><br></pre></td></tr></table></figure><p>并在<code>package.json</code>文件中加入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"node gulpfile.js default"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>此时就可以在命令行中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><ol start="2"><li>优化</li></ol><p>现在，可以下载一些插件来优化此时的项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev gulp-rev</span><br><span class="line">$ npm install --save-dev gulp-rev-collector</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>); <span class="comment">//为静态文件随机添加一串hash值, 解决cdn缓存问题</span></span><br><span class="line"><span class="comment">//使用gulp为js和css静态文件添加版本号，升级服务器代码后，可以不用强制更新浏览器或清空缓存，优化用户体验。</span></span><br><span class="line"><span class="keyword">var</span> revCollector = <span class="built_in">require</span>(<span class="string">'gulp-rev-collector'</span>); <span class="comment">//根据rev生成的manifest.json文件中的映射, 去替换文件名称, 也可以替换路径</span></span><br></pre></td></tr></table></figure><p>修改之前的代码为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'revCss'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./html/css/**/*.css'</span>)</span><br><span class="line">    .pipe(rev())<span class="comment">//添加hash后缀</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))<span class="comment">//将添加hash后缀的css文件导出到dist/css</span></span><br><span class="line">    .pipe(rev.manifest())<span class="comment">//生成文件映射</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>));<span class="comment">//将映射文件导出到dist/css</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'revJs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./html/js/**/*.js'</span>)</span><br><span class="line">    .pipe(rev())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">    .pipe(rev.manifest())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'revHtml'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./dist/**/*.json'</span>,<span class="string">'./html/pages/**/*.html'</span>])</span><br><span class="line">    .pipe(revCollector(&#123;</span><br><span class="line">      replaceReved: <span class="literal">true</span><span class="comment">//允许替换</span></span><br><span class="line">    &#125;)) </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码执行之后可以看到</p><p><img src="https://i.loli.net/2019/07/23/5d367cdb40ae710085.jpg"></p><p>html的文件会根据每个文件夹内存在的<code>rev-manifest.json</code>映射来修改html文件中css和js的引用</p><p><img src="https://i.loli.net/2019/07/23/5d367d9647db476518.jpg"></p><p>此时每次执行会不断生成另一个带有不同hash值的文件，所以需要删除之前生成的文件重新生成，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev gulp-rev</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">'./dist'</span>]); <span class="comment">//先删除dist文件夹，之后重新生成</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(<span class="string">'clean'</span>,gulp.parallel(<span class="string">'revCss'</span>,<span class="string">'revJs'</span>),<span class="string">'revHtml'</span>));</span><br></pre></td></tr></table></figure><ol start="3"><li>gulp还可以处理sass文件，同样需要安装插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev del</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'html/css/**/*.scss'</span>)</span><br><span class="line">    .pipe(sass()) <span class="comment">// Using gulp-sass</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>插件可以根据自己的需求安装使用。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>gulp同样可以用来配置开发环境、生产环境等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev minimist <span class="comment">#nodejs的命令行参数解析工具</span></span><br><span class="line">$ npm install --save-dev gulp-util <span class="comment">#相当于(vinyl)[https://github.com/gulpjs/vinyl]</span></span><br><span class="line">$ npm install --save-dev gulp-concat <span class="comment">#文件合并</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minimist = <span class="built_in">require</span>(<span class="string">'minimist'</span>);</span><br><span class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myConfig=&#123;</span><br><span class="line">  <span class="string">"dev"</span>:&#123;</span><br><span class="line">    <span class="string">"title"</span>:<span class="string">'dev'</span>,</span><br><span class="line">    <span class="string">"url"</span>:<span class="string">"www.dev.com"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"pro"</span>:&#123;</span><br><span class="line">    <span class="string">"title"</span>:<span class="string">'pro'</span>,</span><br><span class="line">    <span class="string">"url"</span>:<span class="string">"www.pro.com"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = minimist(process.argv.slice(<span class="number">2</span>), &#123;</span><br><span class="line">  string:<span class="string">'env'</span>,</span><br><span class="line">  <span class="keyword">default</span>: &#123;<span class="comment">//默认参数</span></span><br><span class="line">    env: process.env.NODE_ENV || <span class="string">'development'</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成filename文件，存入string内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string_src</span>(<span class="params">filename, string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> src = <span class="built_in">require</span>(<span class="string">'stream'</span>).Readable(&#123;<span class="attr">objectMode</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">  src._read = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.push(<span class="keyword">new</span> gutil.File(&#123;</span><br><span class="line">          cwd: <span class="string">""</span>, <span class="attr">base</span>: <span class="string">""</span>, <span class="attr">path</span>: filename, <span class="attr">contents</span>: Buffer.from(string)</span><br><span class="line">      &#125;))</span><br><span class="line">      <span class="keyword">this</span>.push(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> src</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'config'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//取出对应的配置信息</span></span><br><span class="line">  <span class="keyword">var</span> envConfig = myConfig[options.env];</span><br><span class="line">  <span class="keyword">var</span> conConfig = <span class="string">'urlConfig = '</span> + <span class="built_in">JSON</span>.stringify(envConfig);</span><br><span class="line">  <span class="comment">//生成config.js文件</span></span><br><span class="line">  <span class="keyword">return</span> string_src(<span class="string">"config.js"</span>, conConfig)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./html/js/'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并config.js和index.js文件，新生成的js文件名为main.js</span></span><br><span class="line">gulp.task(<span class="string">'serve'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./html/js/config.js'</span>, <span class="string">'./html/js/index.js'</span>])</span><br><span class="line">    .pipe(concat(<span class="string">'main.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./html/js'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(<span class="string">'clean'</span>,<span class="string">'config'</span>,<span class="string">'serve'</span>,gulp.parallel(<span class="string">'revCss'</span>,<span class="string">'revJs'</span>),<span class="string">'revHtml'</span>));</span><br></pre></td></tr></table></figure><p>更改<code>package.json</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"dev-gulp"</span>: <span class="string">"node_modules/.bin/gulp default --env dev"</span>,</span><br><span class="line">  <span class="string">"pro-gulp"</span>: <span class="string">"node_modules/.bin/gulp default --env pro"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>main.js</code>内容如下，在需要的地方引入即可</p><p><img src="https://i.loli.net/2019/07/23/5d36b1258163385001.jpg"></p><p><a href="https://github.com/guihuashitang/gulp" target="_blank" rel="noopener">代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Gulp是前端自动化开发工具，提高开发的效率。例如：css、js的合并与压缩、html压缩、压缩less、压缩图片等。&lt;br&gt;本文主要介绍&lt;a href=&quot;https://www.gulpjs.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="IT" scheme="http://yoursite.com/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建博客</title>
    <link href="http://yoursite.com/2019/07/22/hexo/"/>
    <id>http://yoursite.com/2019/07/22/hexo/</id>
    <published>2019-07-22T02:25:55.000Z</published>
    <updated>2019-07-23T07:09:40.036Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用hexo搭建了个人博客，先记录一下自己的搭建过程。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>首先需要安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>和<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">nodeJs</a>。因为nodeJs集成了npm，所以不用单独安装npm。一路next即可，安装完成可用git -v、node -v、npm -v查看</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>创建一个新的文件夹，在这个文件夹下右键打开Git Bash Here，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>或者可以使用淘宝镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">$ cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>之后初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myHexo <span class="comment">#名字可以自行更改</span></span><br><span class="line">$ <span class="built_in">cd</span> myblog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment">#生成静态文件</span></span><br><span class="line">$ hexo s <span class="comment">#启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></span><br></pre></td></tr></table></figure><h2 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h2><p>首先创建一个仓库：</p><p><img src="/images/hexo/git.png"></p><p>前后的用户名要相同，因为我已经创建了，所以红字。</p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p>打开本地的配置文件<code>_config.yml</code>，在最后添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:  git@github.com: guihuashitang/guihuashitang.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>部署先要下载一个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line">hexo g      <span class="comment">#生成静态文件</span></span><br><span class="line">hexo d      <span class="comment">#部署之前预先生成静态文件</span></span><br></pre></td></tr></table></figure><p>命令我都使用了缩写，具体命令或者其他命令可以查看<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">hexo文档</a><br>部署成功之后就可以在https://你的仓库名.github.io上看到效果。</p><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>评论使用了<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">gitalk</a>评论组件，我使用的主题是在官网上下载的叫做apollo，这个主题使用的是jade语法。</p><h4 id="1-注册-GitHub-Application"><a href="#1-注册-GitHub-Application" class="headerlink" title="1.注册 GitHub Application"></a>1.注册 <a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">GitHub Application</a></h4><p><img src="/images/hexo/Application.png"></p><p>注册完之后会有Client ID和Client Secret</p><p><img src="/images/hexo/15637.png"></p><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><p>在<code>apollo/_config.yml</code>中添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: <span class="literal">true</span> <span class="comment">//用来做启用判断可以不用</span></span><br></pre></td></tr></table></figure><p>找到<code>apollo/layout/partial/head.jade</code>，引入css</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link(rel=<span class="string">"stylesheet"</span>, href=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>)</span><br></pre></td></tr></table></figure><p>然后找到<code>apollo/layout/partial/comment.jade</code>，加入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.gitalk.enable  <span class="comment">//注意代码缩进</span></span><br><span class="line">  #gitalk-container</span><br><span class="line">  script(src=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>)</span><br><span class="line">  script.</span><br><span class="line">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">    clientID: <span class="string">'你自己的clientID'</span>,</span><br><span class="line">    clientSecret: <span class="string">'你自己的clientSecret'</span>,</span><br><span class="line">    id: location.pathname,</span><br><span class="line">    repo: <span class="string">'guihuashitang.github.io'</span>,</span><br><span class="line">    owner: <span class="string">'guihuashitang'</span>,</span><br><span class="line">    admin: [<span class="string">'guihuashitang'</span>],</span><br><span class="line">    distractionFreeMode: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    gitalk.render(<span class="string">'gitalk-container'</span>)</span><br></pre></td></tr></table></figure><p>这是我的配置，也可以把所有的配置都加入到<code>_config.yml</code>中</p><p><img src="/images/hexo/111.png"></p><p><img src="/images/hexo/222.png"></p><p>然后打开你的仓库xxxx.github.io，在设置中打开Issues</p><p><img src="/images/hexo/12.png"></p><p><img src="/images/hexo/13.png"></p><p>最后重新部署，部署之后打开 <a href="https://guihuashitang.github.io/" target="_blank" rel="noopener">https://guihuashitang.github.io/</a> 就可以看到了,guihuashitang换成自己的用户名即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line">hexo g      <span class="comment">#生成静态文件</span></span><br><span class="line">hexo d      <span class="comment">#部署之前预先生成静态文件</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/22/5d3564b58bc6085232.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近使用hexo搭建了个人博客，先记录一下自己的搭建过程。&lt;/p&gt;
&lt;h2 id=&quot;搭建环境&quot;&gt;&lt;a href=&quot;#搭建环境&quot; class=&quot;headerlink&quot; title=&quot;搭建环境&quot;&gt;&lt;/a&gt;搭建环境&lt;/h2&gt;&lt;p&gt;首先需要安装&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="IT" scheme="http://yoursite.com/tags/IT/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/11/hello-world/"/>
    <id>http://yoursite.com/2019/07/11/hello-world/</id>
    <published>2019-07-11T08:43:27.423Z</published>
    <updated>2019-07-12T02:04:19.963Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
